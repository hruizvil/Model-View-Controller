'''
    Controls model and view
    No user interfacing, no game logic
'''
import connect_four_model
"Makes moves for player, updates board, etc"
import new_module
"Sends information to viewer from model"

move_dict = { '100': 1, '200': 2, '300': 3, '400': 4, '500': 5, '600': 6, '700': 7 }

def make_move(mouse_pos, current_player):
    if mouse_pos <= 100:
        valid_move = game.make_move(current_player, move_dict['100'])
        return valid_move
    elif 100 <= mouse_pos <= 200:
        valid_move = game.make_move(current_player, move_dict['200'])
        return valid_move
    elif 200 <= mouse_pos <= 300:
        valid_move = game.make_move(current_player, move_dict['300'])
        return valid_move
    elif 300 <= mouse_pos <= 400:
        valid_move = game.make_move(current_player, move_dict['400'])
        return valid_move
    elif 400 <= mouse_pos <= 500:
        valid_move = game.make_move(current_player, move_dict['500'])
        return valid_move
    elif 500 <= mouse_pos <= 600:
        valid_move = game.make_move(current_player, move_dict['600'])
        return valid_move
    elif 600 <= mouse_pos <= 700:
        valid_move = game.make_move(current_player, move_dict['700'])
        return valid_move
if __name__ == '__main__':
    game = connect_four_model.Board()
    current_player = game.current_player
    new_module.display_board()
    counter = None
    
    while 1:
        mouse_pos = new_module.next_move(game.current_player, counter)
        
        if make_move(mouse_pos, game.current_player):
            new_module.update_display_board(game.board)
                
            game_over = game.is_game_over()
                 
            if game_over[0] or game_over[1]:
                new_module.get_winner(game.current_player)
                new_module.print_game_over()
                counter = True
            elif game_over[0] and game_over[1]:
                new_module.get_tied()
                new_module.print_game_over()
                counter = True
            else:
                game.whose_turn_is_it()
                
        else: 
            new_module.print_Invalid_Move()
